	版本控制工具git
	
	什么是shell？KDE Application
	 就是一个外壳，可以说是图形界面
	 接受这来自使用者的指令，以此来跟核心进行连接
	
	核心Kernel：真正在控制着硬件工作的东西，含有cpu进程等输入输出工作
	硬件：整个系统中实际的工作者，包含了向CPU显卡电路板等各种硬件，没有他们就没有其他的了。
	
	shell的分类
		1、图形界面shell：通过提供友好的可视化界面，调用相应应用程序，如windows系列操作系统，Linux系统上的图形化应用GNOME、KDE等。
		2、命令行的shell：通过键盘输入特定命令的方式，调用相应的应用程序，如Windows系统的cmd.exe、windows powerShell，Linux系统的Boume shell（sh）、BourneAgain shell（bash）等
	
	bash命令格式
		命令 [-options] [参数]，如tar zxvf
		查看帮助：命令--help
	bash常见命令
		pwd(Print Working Directory)查看当前目录 如果想知道自己的工作目录就可以直接使用这个命令
		cd(Change Directory) 切换目录 cd picture
		ls(List)查看当前目录下内容，如ls -al
		mkdir(Make Directory) 创建目录，如mkdir jss  mkdir css
		touch创建文件，如touch index.html 如果想在其他地方创建文件可以将路径写全既可以 touch jss/index.html
		cat查看文件全部内容，如cat index.html 将文件内的内容显示出来
		more/less查看文件，如more/etc/passwd  less/etc/passwd  less这个是只显示一部分内容，是按照分页的方式来显示
		cd ..就是返回上一级目录的
		q是退出的意思
		rm(remove)删除文件，如rm index.html、re -r blog
		rmdir(Remove Directory)删除文件夹，只能删除空文件夹，不常用 rmdir jss
		rm -r blog递归的删除文件，只需要加上一个-r既可以了。就可以将这个有文件的文件夹删除
		
				ls -a就是将所有的文件都展示出来，包括隐藏的文件
					ls虽然也可以展示所有文件，但是一些隐藏的文件还是看不到的
				ls -l就是将文件用列表的形式展示出来，文件的所有信息都是可以看到的
				ls -a -l 跟ls -al的方式是一样的，既可以以列表的形式展示出来，又可以将隐藏的内容都展示出来
		mv(move)移动文件或重命名，如mv index.html jss   重名名操作mv index.html jss/index1.html
		cp(copy)复制文件，cp index.html jss  cp index.html jss/index1复制到指定的目录下 复制也是可以改名的，cp index2.html jss/index3.html
		head查看文件前几行，如head -n 5 index.html表示查看这个文件的前五行内容
		tail查看文件后几行 -n,如tail index.html  tail -n 5 index.html  或者tail -5 index.html 也是可以操作的
		tab自动补全，连着按两次会将所有匹配内容显示出来
		history查看操作历史
		ssh远程登录，如ssh root@gitlab.study.com
		> 和 >>重定向，如echo hello world！>README.md, >覆盖>>追加
			ls > index.txt就是将当前本来要显示的内容显示到了这个文件内，会将文件内的内容覆盖
			echo hello bash > index.txt就是讲这个hello bash从定向到这个文件中去 
			echo hello bash >> index.txt这个就是追加的操作，一个>是重定向>>是追加操作
			echo hello > abc.txt如果这个文件不存在就会自动创建一个
			
		curl网络请求，如curl http://www.baidu.com	
			curl http://www.baidu.com > baidu.html就直接把百度的页面给拿到了我们创建的这个页面中了。
		whoami查看当前用户
			我这里返回的是一个administrator
		tar解压缩，如tar zxvfnode-v4.4.0.tar.gz
		wget下载，如wget .....网址http://www............
		--help是一个帮助文档，按下q就会退出
	管道符可以将多个命令连接使用  上一个命令的结果给下一次的参数使用
	grep:正则匹配内容  grep i index.txt在这个文件中匹配到含有i的内容，并显示出来
	管道符合grep组合使用 ls | grep s  意思就是将这ls的内容给grep使用，在这些内荣找到含有s的内容显示出来
	
	
	vi编辑器
		如同windows下的记事本，vi编辑器是linux下的标配，通过他我们可以创建、编辑文件，它是一个随系统一起安装的文本编辑软件
		1、三种模式
		vi编辑器提供了3种模式，分别是命令模式、插入模式、底行模式，每种模式下用户所能进行的操作是不一样的
		我们一输入vi进入的是命令行模式，此时我们是不能进行操作的，我们可以按下i或a来进入输入模式，返回命令行模式可以按下esc
		要进入底行模式可以按下shift+:就可以进入底行模式
	使用vi编辑器
		打开/创建文件，vi文件路径
		底行模式：w保存，：w filenme另存为
			q退出
			e!撤销更改，返回到上一次保存的状态
			q!不保存强制退出
			setnu设置行号
		命令模式：ZZ保存并退出
			u撤销操作，可以多次使用
			dd删除当前行
			yy复制
			ctrl+f向前翻页
			ctrl+b向后翻页
			i进入编辑模式，当前光标
			a进入编辑模式，当前光标后插入
			A进入编辑模式，当前光标移动到行尾
			o进入编辑模式，当前行下面插入新行
			O进入编辑模式，当前行上面插入新行
			当我们处在编辑模式的情况下，和我们在windows编辑器的使用相似
	
	
	SSH
		SSH是一种网络协议，用于计算机之间的加密登录
		SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文中针对的是OpenSSH,它是自己软件，应用非常广泛。
		如果要在windows系统中使用SSH，会用到另一种软件PuTTY,我们后面用到Git客户也继承了SSH
		格式：ssh user@host
		user代表着真实存在的用户host代表要登录的远程计算机
		常见有两种加密技术，分别是对称性加密和非对称性加密，SSH属于后者。
		
		公钥/私钥
			使用公钥进行加密数据，这种情况只能使用对应的私钥才能解开
			使用私钥进行加密数据，这种情况只能使用对应的公钥才能解开
		第一次登陆时服务器将公钥传递过来，本地计算机进行存储，下次传递数据时，便会使用该公钥进行加密
			对称性加密：加密解密一样
			非对称性加密：加密解密不一样
	
			远程登录：ssh student@192.168.141.61
			ssh 用户名@IP地址
	
	关于版本控制
		版本控制（Version Control Systems）是一种记录一个或若干个文件内容变化，以便来查阅特定版本修订情况的系统，
		这个系统可以自动帮我们备份文件的每一次更改，并且可以非常方便的恢复到任意的备份（版本）状态。
		
		举例：我们通常都是手动的重命名一个文件进行备份，index.html改成index.html.back等形式，然后这种方式对于单个文件
		。
		实现版本控制的软件有很多，大致可以分为本地版本控制系统、集中式版本控制系统、分布式版本控制系统
		本地版本控制系统
			这种类型的 版本控制系统，功能比较单一，比如很难实现多人协同开发，所以现在几乎很少使用了。
			
		集中式版本控制系统
			这种方式很好的解决了多人协同开发的问题，但是也有一个弊端，如果集中管理的服务器出现故障，将会导致数据（版本）丢失的风险
			另外协同开发者从集中服务器中更新数据时，严重依赖网络，如果网络不佳，也给开发带来诸多不便。
			
			协同工作的开发者都是通过客户端连到这台服务器，去除最新的文件或者提交更新，其代表为SVN
		
		分布式版本控制系统
			分布式版本控制系统，则不需要中央服务器，每个协同开发者都拥有一个完整的版本库，这么一来，任何协同开发者用的
			服务器发送故障，事后都可以用其他协同开发者本地仓库进行恢复。
			
		git安装
			window安装
				http://git-scm.com/download/with下载git客户端软件，和普通软件安装方式一样。
			
			git工作原理：
				为了更好的学习git，我们必须了解git管理我们文件的三种状态，分别是已提交（committed）、已修改（modified）
				和已暂存（staged），由此引入git项目的三个工作区域的概念：Git仓库、工作目录以及暂存区域。
				
				git仓库目录：是git用来保存项目的元数据和对象数据库的地方。这是Git中最重要的部分，从其他计算机克隆仓库时，拷贝的就是这里的数据。
				工作目录：是对项目的某个版本独立提取出来的内容，这些从git仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。
				暂存区域：是一个文件，保存了下次将提交的文件列表信息，一般在git仓库目录中，有时候也被称作为“索引”不过一般的说法还是叫做暂存区域。
				
				git init  命令可以将一个原来普通的文件夹变成一个仓库，initialized empty Git repository in ////当前文件路径
				ls-al展示一下就可以将这个隐藏目录展示出来了。
				git add index.html  将这个文件放到暂存区域内  使用git add -A也是可以的，这个方式是将所有文件都放入仓库
				git commit -m '初始化了仓库'  将暂存区域内的数据放到仓库中
	
			1、要使用git来管理我们代码，首先要活的一个仓库，进入跟目录执行git init这样就创建了一个.get(仓库)
			2、git config 配置用信息（只需要配置一次即可）
			3、git status 查看仓库状态
			4、git add将文件放入的暂存区的三种方式
				git add -A  这个命令是可以将所有的文件都放入到仓库内
				git add * 这个也是可以的
				git add 全路径名
			5、撤销操作 git checkout index.html 将暂存区的内容还原到工作区，工作区就是我们可以看到的。就是撤销。	
			6、git commit -m 备注信息   将暂存区内容放到仓库永久存储（并且生产一个新版本/存盘点/历史）
			7、查看日志信息：git log
			8、git reset --hard ...将序号复制到这个位置就可以回到指定的某一个版本位置。ID地址复制到这个位置
			
			
			git config --global user.name zhaoyuchuan   这个是名字
			git config --global user.email zhaoyuchuan  这个一个箱配置 如果这些都没有信息出现  那就是配置成功了‘
			我们再回过来执行这个命令
			git commit -m '初始化了仓库'  将暂存区域内的数据放到仓库中，就会成功了
			
			查看自己的配置信息：git config --list
			查看日志信息：git log
			
			有一个命令可以查看当前仓库的状态，会告诉你仓库中哪些文件被修改过
				git status
				红颜色的文件是没有将修改过的文件添加进仓库，而绿色的则是修改后添加了的
			git add -A  这个命令是可以将所有的文件都放入到仓库内
			git add * 这个也是可以的 
	
	
	
	
	git分支
		在我们的现实开发中，需求往往是五花八门的，同时开发个需求的情况十分常见，比如当你正专注开发一个功能时，突然有一个bug
		需要你来修复，这个时候我们当然是希望在能够保存当前任务进度，再去修改这个bug，等这个bug修复完成之后再继续我们的任务，
		如何实现呢？
		
		通过git创建分支来解决实际开发类似的问题
		在git的使用过程中一次提交被称之为历史记录（版本），并且会生出一个唯一的字符串ID，
	
		1、创建分支
			master至少要commit一次
			
		 新建分支 git branch 分支名字
		查看分支 git branch 
		切换到分支 git checkout 分支名   
		合并分支：git merge master   master是被合并到分支上的。
		创建一个分支并且切换到这个新创建的分支上git checkout -b 分支名字
		
		如：在开发的时候，先开发了一个登陆功能，这个时候就将这个功能放到仓库中，然后接着开发第二个功能，但是这个时候登陆功能出现了bug要修复，
		这个时候可以创建一个分支，将正在开发的功能放到这个分支内的仓库，回到这个master上修改bug，再次上传到仓库，然后回到这个分支上接着写
		写好之后，就可以将代码合并一下，因为git不会判断哪个代码，这里就需要将一些代码修改调整一下！
	
		新建的子分支就会继承父分支的所有提交历史
		
		删除分支
			git branch -D 分支名称   -D这个是强制删除的  -d只是简单的删除
			删除分支的时候，一般要回到主分支上来进行删除创建的分支（在删除的时候，如果没有提交的话，是会出现错误的）
	
		分支
		git push 远程仓库地址 master将master共享到远程仓库
		git pull 远程仓库地址master
			
			创建共享仓库需要两个条件
			1、xxx.git结尾的目录
			2、必须是一个裸仓库 git init --bare
			本地也是需要有一个仓库的
			
			注意：git会自动的忽略空的文件夹
			
			1、如何创建村盘点（实现版本控制）
			2、分支解决了（多任务）
			3、远程仓库实现（多人协同开发）
			
			登录远程仓库：git push student@192.168.141.95:文件路径.git masterz这个放入
			git pull student@192.168.141.95:文件路径.git masterz这个放入
192.168.31.123本机ip
		给远程登录地址取一个别名：git remote add 别名 真实地址
								git remote add itcast student@192.168.141.95:/home/student/itcast.git
		
		远程仓库的克隆
		git clone student@192.168.141.95
		git clone 远程仓库地址 
		
		
	gitHub和gitLab
		如果我们熟悉服务器的话，我们完全可以将上述的步骤在我们的远程服务器上进行操作，然后再做一些登录权限的设置，就可以非常完美的搭建一个共享
		创建秘钥：
			ssh-keygen -t rsa
			
		git clone 仓库名   获取已有仓库的副本
		
		git的规范管理，否则便会适得其反
			1、不要有太多的树杈（自分支）
			2、要有一个“稳定分支”，即master分支不要轻易被修改
			3、要有一个开发分支（developer），包装master分支的稳定性
			4、所有的功能分支（feature）从developer创建
			5、所有功能开发完成后新建发布分支（release）
		
		
		
		仓库repository	
		收藏star	
		复制克隆fork
		pull request发起请求	
		watch关注，如果你关注了一个项目，以后这个项目一旦有了更新就会通知你
		ISSUE事务卡片  bug问题的交流列表
		GitHub主页：账号创建成功或进入GitHub主页，该页左侧主要显示用户动态以及关注用户或者关注仓库的动态，右侧显示所有的git库
		仓库主页：仓库主页主要显示项目的信息，如项目代码、版本，收藏/关注/fork情况等
		个人主页：个人信息，头像、个人简介、关注我的人、我关注的人、我关注的git库、我的开源项目、我贡献的开源项目等信息
		
		sign in登入
		sign up注册
		翻墙（shadowsocks）在git上可以找到
		
		GitHub page 搭建网站
			访问http://GitHub用户名.GitHub.io
			
			搭建步骤：
				1、创建个人站点：新建仓库（注：仓库名必须是[用户名.github.io]）
				2、在仓库下新建index.html的文件即可
				
				注意：git个人主页只能放置.html文件，并且只支持静态网页
				
				创建的账号的时候，qq邮箱就需要设置白名单才能验证 
				
				initialize this repository with a README在仓库下多一个reade的说明文件，来详细描述项目
				
				
				commit是可以查看文件修改过的记录
		
				find file的快捷键是：t/T都是可以
		git clone git仓库地址（在git仓库的clone下复制下来就是这个仓库地址了）
		
		没有权限的解决方法   如果不想老是输入密码和用户名，可以使用一下的方式来修改config文件
			在.git隐藏目录下找到config文件
			将[remote "origin"]
				url=http://github.com/用户名、仓库名.git
			修改为：
				[remote "origin"]
					url=https://用户名：密码@github.com/用户名/仓库名.git
		
		如：https://HuaChuanXing:Hcx19970101A@github.com/HuaChuanXing/FirstText001.git
		
		将远程仓库跟本地仓库关联在一起的方法https://blog.csdn.net/xc917563264/article/details/80533734
		
	
	远程仓库提交方式：
		1、先创建一个空仓库
			git init 
		
		2、将文件添加到暂存区
			git add 文件名
		
		3、将文件从暂存区放入本地仓库
			git commit -m '备注信息'
		
		4、关联远程仓库
			git remote add origin 你的远程地址            用户名       仓库名 
			例我：git remote add origin http://github.com/HuaChuanXing/FirstText001.git
		
		5、获取到远程库与本地同步合并（如果不做这个步骤，后面的提交都有可能会出错）
			git pull --rebase origin master
		
		6、把本地库的内容推送到远程，使用git push命令，实际上是将当前分支master推送到远程  要输入用户名和密码
			git push -u origin master
		
		7、状态可以查询
			git status
		
	
	
	
	
	
	
	
	
	
	
	